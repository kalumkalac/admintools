#!/bin/bash

### BEGIN INIT INFO
# Provides:          iptables
# Required-Start:    $syslog $network
# Required-Stop:     $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Load firewall rules at boot time
# Description:       Another iptables script
### END INIT INFO

# Author: Kevin MET https://mnt-tech.fr/
# Version: 1.1
# Released: 2013/05/29
# Changelog
# 1.0 initial release
# 1.1 Configuration file moved to /etc/iptables/iptables.conf
# 1.2 Masquerade improvement and bug correction

PATH=/bin:/sbin:/usr/bin:/usr/sbin

if ! [ -f /etc/iptables/iptables.conf ]; then
	echo "The configuration file /etc/iptables/iptables.conf does not exist"
	exit 1
else
	source /etc/iptables/iptables.conf	
fi


if ! [ -x /sbin/iptables ]; then  
	echo "iptables is missing. Try 'apt-get install iptables'"
	exit 1
else
    BIN=/sbin/iptables
fi

iptables_start () {
    #
    # Table nat
    #
    # TCP forwarding
    if (( ${#PAT_TCP_SERVICES[@]} > 0 )); then
        for i in `seq 1 ${#PAT_TCP_SERVICES[@]}`; do
            SOURCE_PORT=`echo ${PAT_TCP_SERVICES[$i]} | awk '{print$1}'`
            DEST_IP_PORT=`echo ${PAT_TCP_SERVICES[$i]} | awk '{print$2}'`
            $BIN -t nat -A PREROUTING -i eth0 -p tcp -m tcp --dport $SOURCE_PORT -j DNAT --to-destination $DEST_IP_PORT
        done
    fi
    # UDP forwarding
    if (( ${#PAT_UDP_SERVICES[@]} > 0 )); then
        for i in `seq 1 ${#PAT_UDP_SERVICES[@]}`; do
            SOURCE_PORT=`echo ${PAT_UDP_SERVICES[$i]} | awk '{print$1}'`
            DEST_IP_PORT=`echo ${PAT_UDP_SERVICES[$i]} | awk '{print$2}'`
            $BIN -t nat -A PREROUTING -i eth0 -p udp -m udp --dport $SOURCE_PORT -j DNAT --to-destination $DEST_IP_PORT
        done
    fi
    # Masquerade
    if (( ${#MASQUERADE_SUBNET[@]} > 0 )); then
        for i in `seq 1 ${#MASQUERADE_SUBNET[@]}`; do
		NETWORK=`echo ${MASQUERADE_SUBNET[$i]} | cut -d ',' -f 1`
		INF=`echo ${MASQUERADE_SUBNET[$i]} | cut -d ',' -f 2`
            $BIN -t nat -A POSTROUTING -s $NETWORK -o $INF -j MASQUERADE
        done
    fi

    #
    # Table filter
    #
    # Input
    # Accept what is already established, localhost and ICMP
    $BIN -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    $BIN -A INPUT -i lo -j ACCEPT
    $BIN -A INPUT -p icmp -j ACCEPT
    # TCP services
    if [ -n "$INPUT_TCP_SERVICES" ] ; then
        for PORT in $INPUT_TCP_SERVICES; do
            $BIN -A INPUT -p tcp --dport ${PORT} -j ACCEPT
        done
    fi
    # UDP services
    if [ -n "$INPUT_UDP_SERVICES" ] ; then
       for PORT in $INPUT_UDP_SERVICES; do
           $BIN -A INPUT -p udp --dport ${PORT} -j ACCEPT
       done
    fi
    # Input default policy
    $BIN -P INPUT DROP
    $BIN -A INPUT -j LOG
    # Forward
    if [ "$XEN" = "1" ]; then
        while read LINE; do
            $BIN $LINE
        done < /etc/iptables/iptables.xen
    fi
    # Output
    # Accept what is already established, localhost and ICMP
    $BIN -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    $BIN -A OUTPUT -o lo -j ACCEPT
    $BIN -A OUTPUT -p icmp -j ACCEPT
    # TCP services
    if [ -n "$OUTPUT_TCP_SERVICES" ] ; then
        for PORT in $OUTPUT_TCP_SERVICES; do
            $BIN -A OUTPUT -p tcp --dport ${PORT} -j ACCEPT
        done
    fi
    # UDP services
    if [ -n "$OUTPUT_UDP_SERVICES" ] ; then
        for PORT in $OUTPUT_UDP_SERVICES; do
            $BIN -A OUTPUT -p udp --dport ${PORT} -j ACCEPT
        done
    fi
    # Output default policy
    $BIN -P OUTPUT DROP
    $BIN -A OUTPUT -j LOG


    # Other network protections
    # (some will only work with some kernel versions)
    #echo 1 > /proc/sys/net/ipv4/tcp_syncookies
    #echo 1 > /proc/sys/net/ipv4/ip_forward
    #echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts 
    #echo 1 > /proc/sys/net/ipv4/conf/all/log_martians 
    #echo 1 > /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses
    #echo 1 > /proc/sys/net/ipv4/conf/all/rp_filter
    #echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
    #echo 0 > /proc/sys/net/ipv4/conf/all/accept_source_route
}

iptables_stop () {
    if [ "$XEN" = "1" ]; then
        echo "" > /etc/iptables/iptables.xen
        iptables-save | grep "\-A FORWARD" | grep physdev | grep vif > /etc/iptables/iptables.xen
    fi
    $BIN -F
    $BIN -Z
    $BIN -X
    $BIN -t nat -F
    $BIN -t nat -Z
    $BIN -t nat -X
    $BIN -t mangle -F
    $BIN -t mangle -Z
    $BIN -t mangle -X
    $BIN -P INPUT ACCEPT
    $BIN -P FORWARD ACCEPT
    $BIN -P OUTPUT ACCEPT
}

iptables_save () {
    iptables-save > /etc/iptables/iptables.save
}

iptables_restore () {
    iptables-save < /etc/iptables/iptables.save
}

case "$1" in
start|restart)
    echo "Starting firewall.."
    iptables_stop 
    iptables_start
    echo "done."
    if [ "$FAIL2BAN" = "1" ]; then
        echo "Restarting fail2ban.."
        /etc/init.d/fail2ban restart
        echo "done."
    fi
    ;;
stop)
    echo "Stopping firewall.."
    iptables_stop
    echo "done."
    if [ "$FAIL2BAN" = "1" ]; then
        echo "Restarting fail2ban.."
        /etc/init.d/fail2ban restart
        echo "done."
    fi
    ;;
test)
	echo "The rules will be applied during 30 secondes.."
	iptables_stop
	iptables_start
	sleep 30
	iptables_stop
	echo "Rules cleared."
	if [ "$FAIL2BAN" = "1" ]; then
		echo "Restarting fail2ban.."
		/etc/init.d/fail2ban restart
		echo "done."
	fi
    ;;
save)
    echo "Saving configuration to /etc/iptables.iptables_save.."
    iptables_save
    echo "done."
    ;;
restore)
    echo "Restoring configuration from /etc/iptables.iptables_save.."
    iptables_restore
    echo "done."
    ;;
*)
    echo "Usage: $0 {start|stop|start|test|save|restore}"
    exit 1
    ;;
esac
exit 0

